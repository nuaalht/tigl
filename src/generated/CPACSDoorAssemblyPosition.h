// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include "CPACSDoorAssemblyPosition_doorType.h"
#include "tigl_internal.h"

namespace tigl
{
    class CTiglUIDManager;
    
    namespace generated
    {
        class CPACSCargoDoorsAssembly;
        
        // This class is used in:
        // CPACSCargoDoorsAssembly
        
        // generated from /xsd:schema/xsd:complexType[284]
        class CPACSDoorAssemblyPosition
        {
        public:
            TIGL_EXPORT CPACSDoorAssemblyPosition(CPACSCargoDoorsAssembly* parent, CTiglUIDManager* uidMgr);
            
            TIGL_EXPORT virtual ~CPACSDoorAssemblyPosition();
            
            TIGL_EXPORT CPACSCargoDoorsAssembly* GetParent() const;
            
            TIGL_EXPORT CTiglUIDManager& GetUIDManager();
            TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT virtual const std::string& GetUID() const;
            TIGL_EXPORT virtual void SetUID(const std::string& value);
            
            TIGL_EXPORT virtual const boost::optional<std::string>& GetName() const;
            TIGL_EXPORT virtual void SetName(const std::string& value);
            TIGL_EXPORT virtual void SetName(const boost::optional<std::string>& value);
            
            TIGL_EXPORT virtual const boost::optional<std::string>& GetDescription() const;
            TIGL_EXPORT virtual void SetDescription(const std::string& value);
            TIGL_EXPORT virtual void SetDescription(const boost::optional<std::string>& value);
            
            TIGL_EXPORT virtual const boost::optional<CPACSDoorAssemblyPosition_doorType>& GetDoorType() const;
            TIGL_EXPORT virtual void SetDoorType(const CPACSDoorAssemblyPosition_doorType& value);
            TIGL_EXPORT virtual void SetDoorType(const boost::optional<CPACSDoorAssemblyPosition_doorType>& value);
            
            TIGL_EXPORT virtual const std::string& GetDoorElementUID() const;
            TIGL_EXPORT virtual void SetDoorElementUID(const std::string& value);
            
            TIGL_EXPORT virtual const std::string& GetStartFrameUID() const;
            TIGL_EXPORT virtual void SetStartFrameUID(const std::string& value);
            
            TIGL_EXPORT virtual const std::string& GetEndFrameUID() const;
            TIGL_EXPORT virtual void SetEndFrameUID(const std::string& value);
            
            TIGL_EXPORT virtual const std::string& GetStartStringerUID() const;
            TIGL_EXPORT virtual void SetStartStringerUID(const std::string& value);
            
            TIGL_EXPORT virtual const std::string& GetEndStringerUID() const;
            TIGL_EXPORT virtual void SetEndStringerUID(const std::string& value);
            
            TIGL_EXPORT virtual const boost::optional<double>& GetZBase() const;
            TIGL_EXPORT virtual void SetZBase(const double& value);
            TIGL_EXPORT virtual void SetZBase(const boost::optional<double>& value);
            
            TIGL_EXPORT virtual const boost::optional<double>& GetMinWidth() const;
            TIGL_EXPORT virtual void SetMinWidth(const double& value);
            TIGL_EXPORT virtual void SetMinWidth(const boost::optional<double>& value);
            
            TIGL_EXPORT virtual const boost::optional<double>& GetMinHeight() const;
            TIGL_EXPORT virtual void SetMinHeight(const double& value);
            TIGL_EXPORT virtual void SetMinHeight(const boost::optional<double>& value);
            
            TIGL_EXPORT virtual const boost::optional<int>& GetYSign() const;
            TIGL_EXPORT virtual void SetYSign(const int& value);
            TIGL_EXPORT virtual void SetYSign(const boost::optional<int>& value);
            
        protected:
            CPACSCargoDoorsAssembly* m_parent;
            
            CTiglUIDManager* m_uidMgr;
            
            std::string                                         m_uID;
            boost::optional<std::string>                        m_name;
            boost::optional<std::string>                        m_description;
            boost::optional<CPACSDoorAssemblyPosition_doorType> m_doorType;
            std::string                                         m_doorElementUID;
            std::string                                         m_startFrameUID;
            std::string                                         m_endFrameUID;
            std::string                                         m_startStringerUID;
            std::string                                         m_endStringerUID;
            boost::optional<double>                             m_zBase;
            boost::optional<double>                             m_minWidth;
            boost::optional<double>                             m_minHeight;
            boost::optional<int>                                m_ySign;
            
        private:
            #ifdef HAVE_CPP11
            CPACSDoorAssemblyPosition(const CPACSDoorAssemblyPosition&) = delete;
            CPACSDoorAssemblyPosition& operator=(const CPACSDoorAssemblyPosition&) = delete;
            
            CPACSDoorAssemblyPosition(CPACSDoorAssemblyPosition&&) = delete;
            CPACSDoorAssemblyPosition& operator=(CPACSDoorAssemblyPosition&&) = delete;
            #else
            CPACSDoorAssemblyPosition(const CPACSDoorAssemblyPosition&);
            CPACSDoorAssemblyPosition& operator=(const CPACSDoorAssemblyPosition&);
            #endif
        };
    }
    
    // CPACSDoorAssemblyPosition is customized, use type CCPACSDoorAssemblyPosition directly
    
    // Aliases in tigl namespace
    #ifdef HAVE_CPP11
    using CCPACSCargoDoorsAssembly = generated::CPACSCargoDoorsAssembly;
    #else
    typedef generated::CPACSCargoDoorsAssembly CCPACSCargoDoorsAssembly;
    #endif
}
