// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include "CPACSAlignmentCrossBeam.h"
#include "CreateIfNotExists.h"
#include "tigl_internal.h"

namespace tigl
{
    class CTiglUIDManager;
    class CCPACSCargoCrossBeamStrutsAssembly;
    
    namespace generated
    {
        // This class is used in:
        // CPACSCargoCrossBeamStrutsAssembly
        
        // generated from /xsd:schema/xsd:complexType[233]
        class CPACSCrossBeamStrutAssemblyPosition
        {
        public:
            TIGL_EXPORT CPACSCrossBeamStrutAssemblyPosition(CCPACSCargoCrossBeamStrutsAssembly* parent, CTiglUIDManager* uidMgr);
            
            TIGL_EXPORT virtual ~CPACSCrossBeamStrutAssemblyPosition();
            
            TIGL_EXPORT CCPACSCargoCrossBeamStrutsAssembly* GetParent() const;
            
            TIGL_EXPORT CTiglUIDManager& GetUIDManager();
            TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT virtual const std::string& GetUID() const;
            TIGL_EXPORT virtual void SetUID(const std::string& value);
            
            TIGL_EXPORT virtual const std::string& GetStructuralElementUID() const;
            TIGL_EXPORT virtual void SetStructuralElementUID(const std::string& value);
            
            TIGL_EXPORT virtual const std::string& GetFrameUID() const;
            TIGL_EXPORT virtual void SetFrameUID(const std::string& value);
            
            TIGL_EXPORT virtual const std::string& GetCrossBeamUID() const;
            TIGL_EXPORT virtual void SetCrossBeamUID(const std::string& value);
            
            TIGL_EXPORT virtual const double& GetPositionYAtCrossBeam() const;
            TIGL_EXPORT virtual void SetPositionYAtCrossBeam(const double& value);
            
            TIGL_EXPORT virtual const boost::optional<double>& GetAngleX() const;
            TIGL_EXPORT virtual void SetAngleX(const double& value);
            TIGL_EXPORT virtual void SetAngleX(const boost::optional<double>& value);
            
            TIGL_EXPORT virtual const boost::optional<CPACSAlignmentCrossBeam>& GetAlignment() const;
            TIGL_EXPORT virtual boost::optional<CPACSAlignmentCrossBeam>& GetAlignment();
            
            TIGL_EXPORT virtual CPACSAlignmentCrossBeam& GetAlignment(CreateIfNotExistsTag);
            TIGL_EXPORT virtual void RemoveAlignment();
            
        protected:
            CCPACSCargoCrossBeamStrutsAssembly* m_parent;
            
            CTiglUIDManager* m_uidMgr;
            
            std::string                              m_uID;
            std::string                              m_structuralElementUID;
            std::string                              m_frameUID;
            std::string                              m_crossBeamUID;
            double                                   m_positionYAtCrossBeam;
            boost::optional<double>                  m_angleX;
            boost::optional<CPACSAlignmentCrossBeam> m_alignment;
            
        private:
            #ifdef HAVE_CPP11
            CPACSCrossBeamStrutAssemblyPosition(const CPACSCrossBeamStrutAssemblyPosition&) = delete;
            CPACSCrossBeamStrutAssemblyPosition& operator=(const CPACSCrossBeamStrutAssemblyPosition&) = delete;
            
            CPACSCrossBeamStrutAssemblyPosition(CPACSCrossBeamStrutAssemblyPosition&&) = delete;
            CPACSCrossBeamStrutAssemblyPosition& operator=(CPACSCrossBeamStrutAssemblyPosition&&) = delete;
            #else
            CPACSCrossBeamStrutAssemblyPosition(const CPACSCrossBeamStrutAssemblyPosition&);
            CPACSCrossBeamStrutAssemblyPosition& operator=(const CPACSCrossBeamStrutAssemblyPosition&);
            #endif
        };
    }
    
    // CPACSCrossBeamStrutAssemblyPosition is customized, use type CCPACSCrossBeamStrutAssemblyPosition directly
}
