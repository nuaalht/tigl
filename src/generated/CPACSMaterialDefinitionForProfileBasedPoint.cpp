// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "CPACSMaterialDefinitionForProfileBasedPoint.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "TixiHelper.h"

namespace tigl
{
    namespace generated
    {
        CPACSMaterialDefinitionForProfileBasedPoint::CPACSMaterialDefinitionForProfileBasedPoint() :
            m_crossSectionArea(0) {}
        
        CPACSMaterialDefinitionForProfileBasedPoint::~CPACSMaterialDefinitionForProfileBasedPoint() {}
        
        void CPACSMaterialDefinitionForProfileBasedPoint::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element pointUID
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/pointUID")) {
                m_pointUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/pointUID");
                if (m_pointUID->empty()) {
                    LOG(WARNING) << "Optional element pointUID is present but empty at xpath " << xpath;
                }
            }
            
            // read element materialUID
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/materialUID")) {
                m_materialUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/materialUID");
                if (m_materialUID.empty()) {
                    LOG(WARNING) << "Required element materialUID is empty at xpath " << xpath;
                }
            }
            else {
                LOG(ERROR) << "Required element materialUID is missing at xpath " << xpath;
            }
            
            // read element crossSectionArea
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/crossSectionArea")) {
                m_crossSectionArea = tixi::TixiGetElement<double>(tixiHandle, xpath + "/crossSectionArea");
            }
            else {
                LOG(ERROR) << "Required element crossSectionArea is missing at xpath " << xpath;
            }
            
            // read element optionalAux1
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/optionalAux1")) {
                m_optionalAux1 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/optionalAux1");
            }
            
            // read element optionalAux2
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/optionalAux2")) {
                m_optionalAux2 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/optionalAux2");
            }
            
        }
        
        void CPACSMaterialDefinitionForProfileBasedPoint::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element pointUID
            if (m_pointUID) {
                tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/pointUID");
                tixi::TixiSaveElement(tixiHandle, xpath + "/pointUID", *m_pointUID);
            } else {
                if (tixi::TixiCheckElement(tixiHandle, xpath + "/pointUID")) {
                    tixi::TixiRemoveElement(tixiHandle, xpath + "/pointUID");
                }
            }
            
            // write element materialUID
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/materialUID");
            tixi::TixiSaveElement(tixiHandle, xpath + "/materialUID", m_materialUID);
            
            // write element crossSectionArea
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/crossSectionArea");
            tixi::TixiSaveElement(tixiHandle, xpath + "/crossSectionArea", m_crossSectionArea);
            
            // write element optionalAux1
            if (m_optionalAux1) {
                tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/optionalAux1");
                tixi::TixiSaveElement(tixiHandle, xpath + "/optionalAux1", *m_optionalAux1);
            } else {
                if (tixi::TixiCheckElement(tixiHandle, xpath + "/optionalAux1")) {
                    tixi::TixiRemoveElement(tixiHandle, xpath + "/optionalAux1");
                }
            }
            
            // write element optionalAux2
            if (m_optionalAux2) {
                tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/optionalAux2");
                tixi::TixiSaveElement(tixiHandle, xpath + "/optionalAux2", *m_optionalAux2);
            } else {
                if (tixi::TixiCheckElement(tixiHandle, xpath + "/optionalAux2")) {
                    tixi::TixiRemoveElement(tixiHandle, xpath + "/optionalAux2");
                }
            }
            
        }
        
        const boost::optional<std::string>& CPACSMaterialDefinitionForProfileBasedPoint::GetPointUID() const
        {
            return m_pointUID;
        }
        
        void CPACSMaterialDefinitionForProfileBasedPoint::SetPointUID(const std::string& value)
        {
            m_pointUID = value;
        }
        
        void CPACSMaterialDefinitionForProfileBasedPoint::SetPointUID(const boost::optional<std::string>& value)
        {
            m_pointUID = value;
        }
        
        const std::string& CPACSMaterialDefinitionForProfileBasedPoint::GetMaterialUID() const
        {
            return m_materialUID;
        }
        
        void CPACSMaterialDefinitionForProfileBasedPoint::SetMaterialUID(const std::string& value)
        {
            m_materialUID = value;
        }
        
        const double& CPACSMaterialDefinitionForProfileBasedPoint::GetCrossSectionArea() const
        {
            return m_crossSectionArea;
        }
        
        void CPACSMaterialDefinitionForProfileBasedPoint::SetCrossSectionArea(const double& value)
        {
            m_crossSectionArea = value;
        }
        
        const boost::optional<double>& CPACSMaterialDefinitionForProfileBasedPoint::GetOptionalAux1() const
        {
            return m_optionalAux1;
        }
        
        void CPACSMaterialDefinitionForProfileBasedPoint::SetOptionalAux1(const double& value)
        {
            m_optionalAux1 = value;
        }
        
        void CPACSMaterialDefinitionForProfileBasedPoint::SetOptionalAux1(const boost::optional<double>& value)
        {
            m_optionalAux1 = value;
        }
        
        const boost::optional<double>& CPACSMaterialDefinitionForProfileBasedPoint::GetOptionalAux2() const
        {
            return m_optionalAux2;
        }
        
        void CPACSMaterialDefinitionForProfileBasedPoint::SetOptionalAux2(const double& value)
        {
            m_optionalAux2 = value;
        }
        
        void CPACSMaterialDefinitionForProfileBasedPoint::SetOptionalAux2(const boost::optional<double>& value)
        {
            m_optionalAux2 = value;
        }
        
    }
}
