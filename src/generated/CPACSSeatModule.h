// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <CCPACSPoint.h>
#include <string>
#include <tixi.h>
#include "CreateIfNotExists.h"
#include "tigl_internal.h"

namespace tigl
{
    class CTiglUIDManager;
    
    namespace generated
    {
        // This class is used in:
        // CPACSSeatModules
        
        // generated from /xsd:schema/xsd:complexType[790]
        class CPACSSeatModule
        {
        public:
            TIGL_EXPORT CPACSSeatModule(CTiglUIDManager* uidMgr);
            TIGL_EXPORT virtual ~CPACSSeatModule();
            
            TIGL_EXPORT CTiglUIDManager& GetUIDManager();
            TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT virtual const std::string& GetUID() const;
            TIGL_EXPORT virtual void SetUID(const std::string& value);
            
            TIGL_EXPORT virtual const boost::optional<std::string>& GetName() const;
            TIGL_EXPORT virtual void SetName(const std::string& value);
            TIGL_EXPORT virtual void SetName(const boost::optional<std::string>& value);
            
            TIGL_EXPORT virtual const boost::optional<std::string>& GetDescription() const;
            TIGL_EXPORT virtual void SetDescription(const std::string& value);
            TIGL_EXPORT virtual void SetDescription(const boost::optional<std::string>& value);
            
            TIGL_EXPORT virtual const int& GetNumberOfSeats() const;
            TIGL_EXPORT virtual void SetNumberOfSeats(const int& value);
            
            TIGL_EXPORT virtual const double& GetWidthOfSeatModule() const;
            TIGL_EXPORT virtual void SetWidthOfSeatModule(const double& value);
            
            TIGL_EXPORT virtual const boost::optional<double>& GetModuleMass() const;
            TIGL_EXPORT virtual void SetModuleMass(const double& value);
            TIGL_EXPORT virtual void SetModuleMass(const boost::optional<double>& value);
            
            TIGL_EXPORT virtual const boost::optional<CCPACSPoint>& GetModuleCoG() const;
            TIGL_EXPORT virtual boost::optional<CCPACSPoint>& GetModuleCoG();
            
            TIGL_EXPORT virtual CCPACSPoint& GetModuleCoG(CreateIfNotExistsTag);
            TIGL_EXPORT virtual void RemoveModuleCoG();
            
        protected:
            CTiglUIDManager* m_uidMgr;
            
            std::string                  m_uID;
            boost::optional<std::string> m_name;
            boost::optional<std::string> m_description;
            int                          m_numberOfSeats;
            double                       m_widthOfSeatModule;
            boost::optional<double>      m_moduleMass;
            boost::optional<CCPACSPoint> m_moduleCoG;
            
        private:
            #ifdef HAVE_CPP11
            CPACSSeatModule(const CPACSSeatModule&) = delete;
            CPACSSeatModule& operator=(const CPACSSeatModule&) = delete;
            
            CPACSSeatModule(CPACSSeatModule&&) = delete;
            CPACSSeatModule& operator=(CPACSSeatModule&&) = delete;
            #else
            CPACSSeatModule(const CPACSSeatModule&);
            CPACSSeatModule& operator=(const CPACSSeatModule&);
            #endif
        };
    }
    
    // Aliases in tigl namespace
    #ifdef HAVE_CPP11
    using CCPACSSeatModule = generated::CPACSSeatModule;
    #else
    typedef generated::CPACSSeatModule CCPACSSeatModule;
    #endif
}
