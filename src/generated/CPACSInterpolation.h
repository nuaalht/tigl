// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <cctype>

#include "CTiglError.h"
#include "to_string.h"

namespace tigl
{
    namespace generated
    {
        // This enum is used in:
        // CPACSLongFloorBeamPosition
        // CPACSStringerFramePosition
        
        // generated from /xsd:schema/xsd:complexType[838]/xsd:complexContent/xsd:extension/xsd:all/xsd:element[8]/xsd:complexType/xsd:simpleContent
        enum CPACSInterpolation
        {
            _0,
            CPACSInterpolation_1
        };
        
        inline std::string CPACSInterpolationToString(const CPACSInterpolation& value)
        {
            switch(value) {
            case _0: return "0";
            case CPACSInterpolation_1: return "1";
            default: throw CTiglError("Invalid enum value \"" + std_to_string(static_cast<int>(value)) + "\" for enum type CPACSInterpolation");
            }
        }
        inline CPACSInterpolation stringToCPACSInterpolation(const std::string& value)
        {
            struct ToLower { std::string operator()(std::string str) { for (std::size_t i = 0; i < str.length(); i++) { str[i] = std::tolower(str[i]); } return str; } } toLower;
            if (toLower(value) == "0") { return _0; }
            if (toLower(value) == "1") { return CPACSInterpolation_1; }
            throw CTiglError("Invalid string value \"" + value + "\" for enum type CPACSInterpolation");
        }
    }
    
    // Aliases in tigl namespace
    #ifdef HAVE_CPP11
    using ECPACSInterpolation = generated::CPACSInterpolation;
    #else
    typedef generated::CPACSInterpolation ECPACSInterpolation;
    #endif
    using generated::_0;
    using generated::CPACSInterpolation_1;
}
